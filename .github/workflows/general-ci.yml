name: General CI

on:
  workflow_call:
    inputs:
      arch:
        type: string
        required: false
        description: "CPU Architecture"
        default: aarch64
      libc:
        type: string
        required: false
        description: "LIBC name"
        default: musl
      python_ver:
        type: string
        required: false
        description: "Python version"
        default: 3.9.7
      create_release:
        type: boolean
        required: false
        description: "Whether to create a release"
        default: false
  
  workflow_dispatch:
    inputs:
      arch:
        required: true
        description: "CPU Architecture"
        default: aarch64
      libc:
        required: true
        description: "LIBC name"
        type: choice
        options:
          - musl
          - uclibc
          - glibc
        default: musl
      python_ver:
        type: string
        required: true
        description: "Python version"
        default: 3.9.7
      create_release:
        type: boolean
        required: true
        description: "Whether to create a release"
        default: false

jobs:

  build_docker:
    if: ${{ !inputs.create_release }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Build the Docker image
      run: docker build --build-arg=ARCH=${{ inputs.arch }} --build-arg=LIBC=${{ inputs.libc }} --build-arg=PYTHON_VER=${{ inputs.python_ver }} --tag static-python-maker .
    - name: Run the Docker image
      run: docker run --name static-python-container static-python-maker
    - name: Get output binary out of docker
      run: docker cp static-python-container:/app/final/static_python .
    - name: Upload docker result
      uses: actions/upload-artifact@v3
      with:
        name: static_python_docker
        path: ./static_python
  
  build_normal:
    if: ${{ !inputs.create_release }}
    runs-on: ubuntu-latest
    steps:
    - name: Prerequisites 
      run: sudo apt install -y build-essential zlib1g-dev wget python3 python3-requests
    - uses: actions/checkout@v3
    - name: Get compiler
      run: python3 bootlin_toolchain_downloader.py ${{ inputs.arch }} ${{ inputs.libc }} --extract --make_runner
    - name: Make static python
      run: Python_VER=${{ inputs.python_ver }} ./make_runner.sh -j all
    - name: Upload normal result
      uses: actions/upload-artifact@v3
      with:
        name: static_python_normal
        path: ./final/static_python

  test_reproducibility:
    if: ${{ !inputs.create_release }}
    runs-on: ubuntu-latest
    needs: [build_docker, build_normal]
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: static_python_docker
        path: docker/
    - uses: actions/download-artifact@v3
      with:
        name: static_python_normal
        path: normal/
    - name: Compare
      run: cmp -s normal/static_python docker/static_python
    
  
  test_python:
    if: ${{ !inputs.create_release }}
    runs-on: ubuntu-latest
    needs: [build_normal]
    steps:
    - name: Prerequisites 
      run: sudo apt install -y qemu-user-static
    - uses: actions/download-artifact@v3
      with:
        name: static_python_normal
    - run: chmod u+x ./static_python
    - name: Test binary with qemu
      run: qemu-${{ inputs.arch }}-static ./static_python -c 'print("hello")'

  release_binaries:
    if: ${{ inputs.create_release }}
    runs-on: ubuntu-latest
    #needs: [test_python, build_normal]
    name: Create Release
    steps:
    #- uses: actions/download-artifact@v3
    #  with:
    #    name: static_python_normal
    - name: dddd
      run: echo aaa > ./static_python
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Static python ${{ inputs.python_ver }} for ${{ inputs.arch }}-${{ inputs.libc }}
        draft: false
        prerelease: true
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./static_python
        asset_name: static_python_${{ inputs.python_ver }}-${{ inputs.arch }}-${{ inputs.libc }}
        asset_content_type: application/octet-stream
    
